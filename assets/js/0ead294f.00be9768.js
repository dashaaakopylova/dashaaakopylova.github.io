"use strict";(self.webpackChunkve_ps=self.webpackChunkve_ps||[]).push([[335],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?o.createElement(f,i(i({ref:n},p),{},{components:t})):o.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var o=t(7462),r=(t(7294),t(4137));const a={sidebar_position:0,sidebar_label:"How to connect Dapp UI to Venom"},i="How to connect Dapp UI to Venom",c={unversionedId:"build/integration-guides/how-to-connect-dapp-ui-to-venom",id:"build/integration-guides/how-to-connect-dapp-ui-to-venom",title:"How to connect Dapp UI to Venom",description:"Project Setup",source:"@site/docs/build/integration-guides/how-to-connect-dapp-ui-to-venom.md",sourceDirName:"build/integration-guides",slug:"/build/integration-guides/how-to-connect-dapp-ui-to-venom",permalink:"/build/integration-guides/how-to-connect-dapp-ui-to-venom",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"How to connect Dapp UI to Venom"},sidebar:"buildSidebar",previous:{title:"Frontend for NFT auction",permalink:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/venom-in-action/frontend-for-nft-auction"},next:{title:"Tools & Resources",permalink:"/build/tools-and-resources"}},l={},s=[{value:'Project Setup <a href="#project-setup" id="project-setup"></a>',id:"project-setup-",level:2},{value:"Install Dependencies",id:"install-dependencies",level:3},{value:'Connecting to the Venom Wallet <a href="#connecting-to-the-metamask-wallet" id="connecting-to-the-metamask-wallet"></a>',id:"connecting-to-the-venom-wallet-",level:2},{value:"How to call smart contracts from code",id:"how-to-call-smart-contracts-from-code",level:3}],p={toc:s};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-connect-dapp-ui-to-venom"},"How to connect Dapp UI to Venom"),(0,r.kt)("h2",{id:"project-setup-"},"Project Setup ",(0,r.kt)("a",{href:"#project-setup",id:"project-setup"})),(0,r.kt)("p",null,"Make sure you have:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The Venom wallet extension  "),(0,r.kt)("li",{parentName:"ol"},"Node.js and NPM ",(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/"},"Downloaded and Installed"))),(0,r.kt)("h3",{id:"install-dependencies"},"Install Dependencies"),(0,r.kt)("p",null,"Open a terminal inside the base directory of your project. Inside the folder, follow the command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm i everscale-inpage-provider --save\n")),(0,r.kt)("h2",{id:"connecting-to-the-venom-wallet-"},"Connecting to the Venom Wallet ",(0,r.kt)("a",{href:"#connecting-to-the-metamask-wallet",id:"connecting-to-the-metamask-wallet"})),(0,r.kt)("p",null,"The first thing we need to do is make sure that the wallet is installed in a browser"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ProviderRpcClient } from 'everscale-inpage-provider';\n\nconst ever = new ProviderRpcClient();\n\nasync function myApp() {\n  if (!(await ever.hasProvider())) {\n  /**\n    * Handle this case by showing the user a link to the Venom extension\n    */\n    throw new Error('Extension is not installed');\n  }\n\n  //...\n}\n")),(0,r.kt)("p",null,"and check if it is connected"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"//...\n\nconst ever = new ProviderRpcClient({\n/**\n  * Fallback function which will be called if injected provider was not found.\n  */\n  fallback: () => {}\n});\n\n\nasync function myApp() {\n  //...\n\n /**\n   * Waits until provider API will be available.\n   * Calls `fallback` if no provider was found\n   * @throws ProviderNotFoundException when no provider is found\n   */\n  await ever.ensureInitialized();\n\n  //...\n}\n")),(0,r.kt)("p",null,"Next, we need to request permission to get account info and interaction with it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"//...\n\nconst { accountInteraction } = await ever.requestPermissions({\n  permissions: ['basic', 'accountInteraction'],\n});\n\nif (accountInteraction == null) {\n  throw new Error('Insufficient permissions');\n}\n")),(0,r.kt)("p",null,"We've connected to Venom wallet, and now we can interact with blockchain: transfer funds, call contract methods, and read their state."),(0,r.kt)("h3",{id:"how-to-call-smart-contracts-from-code"},"How to call smart contracts from code"),(0,r.kt)("p",null,"First, you need to initialize an instance of a contract by its ABI, and address"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"//...\n\nconst DePoolAbi = {...}\nconst dePoolAddress = new Address('0:bb...e9');\n\nconst dePool = new ever.Contract(DePoolAbi, dePoolAddress);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Contract")," is an abstraction that makes it easy to interact with smart contracts on the Venom network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const transaction = await dePool\n    .methods\n    .addOrdinaryStake({\n      stake: '10000000000',\n    }).send({\n      from: selectedAddress,\n      amount: '10500000000',\n      bounce: true,\n    });\n\n  console.log(transaction);\n\n  try {\n    const output = await dePool\n      .methods\n      .getParticipantInfo({\n        addr: selectedAddress,\n      })\n      .call();\n    console.log(output);\n  } catch (e) {\n    if (e instanceof TvmException) {\n      console.error(e.code);\n    }\n  }\n")))}d.isMDXComponent=!0}}]);